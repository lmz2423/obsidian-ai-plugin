/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/main.ts
__export(exports, {
  default: () => AIPlugin
});
var import_obsidian3 = __toModule(require("obsidian"));

// src/AIPromptView.ts
var import_obsidian = __toModule(require("obsidian"));
var AIPromptView = class {
  constructor(app, plugin, editor) {
    this.app = app;
    this.plugin = plugin;
    this.editor = editor;
    this.isVisible = false;
    this.container = document.createElement("div");
    this.container.addClass("ai-prompt-container");
    this.input = document.createElement("input");
    this.input.addClass("ai-prompt-input");
    this.input.placeholder = "\u6309\u4F4F\u7A7A\u683C\u542F\u52A8 AI...";
    this.container.appendChild(this.input);
    this.dropdown = document.createElement("div");
    this.dropdown.addClass("ai-prompt-dropdown");
    this.container.appendChild(this.dropdown);
    this.initializeDropdown();
    this.clickOutsideHandler = this.handleClickOutside.bind(this);
  }
  initializeDropdown() {
    const commands = [
      { id: "summarize", name: "\u6DFB\u52A0\u6458\u8981", icon: "list" },
      { id: "todo", name: "\u6DFB\u52A0\u5F85\u529E\u4E8B\u9879", icon: "checkbox" },
      { id: "table", name: "\u6DFB\u52A0\u8868\u683C", icon: "table" },
      { id: "flowchart", name: "\u6DFB\u52A0\u6D41\u7A0B\u56FE", icon: "flow" }
    ];
    commands.forEach((cmd) => {
      const item = document.createElement("div");
      item.addClass("ai-prompt-item");
      const icon = document.createElement("span");
      icon.addClass("ai-prompt-icon");
      icon.addClass(cmd.icon);
      const text = document.createElement("span");
      text.textContent = cmd.name;
      item.appendChild(icon);
      item.appendChild(text);
      item.addEventListener("click", () => __async(this, null, function* () {
        const prompt = this.input.value;
        const result = yield this.executeCommand(cmd.id, prompt);
        if (result) {
          this.editor.replaceSelection(result);
        }
        this.hide();
      }));
      this.dropdown.appendChild(item);
    });
  }
  executeCommand(commandId, prompt) {
    return __async(this, null, function* () {
      try {
        switch (commandId) {
          case "summarize":
            return yield this.plugin.generateSummary(prompt);
          case "todo":
            return yield this.plugin.generateTodoList(prompt);
          case "table":
            return yield this.plugin.generateTable(prompt);
          case "flowchart":
            return yield this.plugin.generateFlowchart(prompt);
          default:
            return "";
        }
      } catch (error) {
        new import_obsidian.Notice("\u6267\u884C\u547D\u4EE4\u5931\u8D25: " + error.message);
        return "";
      }
    });
  }
  isInputFocused() {
    return document.activeElement === this.input;
  }
  show(position) {
    if (!this.isVisible) {
      const viewportWidth = window.innerWidth;
      const viewportHeight = window.innerHeight;
      let left = position.left;
      if (left + 300 > viewportWidth) {
        left = viewportWidth - 310;
      }
      let top = position.top;
      const estimatedHeight = 200;
      if (top + estimatedHeight > viewportHeight) {
        top = position.top - estimatedHeight - 10;
      }
      this.container.style.left = `${Math.max(10, left)}px`;
      this.container.style.top = `${Math.max(10, top)}px`;
      document.body.appendChild(this.container);
      setTimeout(() => {
        this.input.focus();
      }, 50);
      document.addEventListener("mousedown", this.clickOutsideHandler);
      this.isVisible = true;
    }
  }
  hide() {
    if (this.isVisible) {
      this.container.remove();
      document.removeEventListener("mousedown", this.clickOutsideHandler);
      this.isVisible = false;
      this.input.value = "";
    }
  }
  handleClickOutside(e) {
    if (!this.container.contains(e.target)) {
      this.hide();
    }
  }
};

// src/settings.ts
var import_obsidian2 = __toModule(require("obsidian"));
var AI_PROVIDERS = [
  {
    id: "openai",
    name: "OpenAI",
    baseUrl: "https://api.openai.com/v1/chat/completions",
    models: [
      { id: "gpt-4", name: "GPT-4" },
      { id: "gpt-4-turbo", name: "GPT-4 Turbo" },
      { id: "gpt-3.5-turbo", name: "GPT-3.5 Turbo" }
    ]
  },
  {
    id: "claude",
    name: "Claude",
    baseUrl: "https://api.anthropic.com/v1/messages",
    models: [
      { id: "claude-3-opus", name: "Claude 3 Opus" },
      { id: "claude-3-sonnet", name: "Claude 3 Sonnet" },
      { id: "claude-2.1", name: "Claude 2.1" }
    ]
  },
  {
    id: "kimi",
    name: "Kimi",
    baseUrl: "https://api.moonshot.cn/v1/chat/completions",
    models: [
      { id: "moonshot-v1-8k", name: "Moonshot V1 8K" },
      { id: "moonshot-v1-32k", name: "Moonshot V1 32K" },
      { id: "moonshot-v1-128k", name: "Moonshot V1 128K" }
    ]
  },
  {
    id: "chatglm",
    name: "ChatGLM",
    baseUrl: "https://open.bigmodel.cn/api/paas/v4/chat/completions",
    models: [
      { id: "glm-4", name: "GLM-4" },
      { id: "glm-3-turbo", name: "GLM-3 Turbo" }
    ]
  },
  {
    id: "deepseek",
    name: "DeepSeek",
    baseUrl: "https://api.deepseek.com/v1/chat/completions",
    models: [
      { id: "deepseek-chat", name: "DeepSeek Chat" },
      { id: "deepseek-coder", name: "DeepSeek Coder" }
    ]
  },
  {
    id: "azure",
    name: "Azure OpenAI",
    baseUrl: "",
    models: [
      { id: "gpt-4", name: "GPT-4" },
      { id: "gpt-35-turbo", name: "GPT-3.5 Turbo" }
    ]
  },
  {
    id: "moonshot",
    name: "Moonshot",
    baseUrl: "https://api.moonshot.cn/v1/chat/completions",
    models: [
      { id: "moonshot-v1-8k", name: "Moonshot V1 8K" },
      { id: "moonshot-v1-32k", name: "Moonshot V1 32K" },
      { id: "moonshot-v1-128k", name: "Moonshot V1 128K" }
    ]
  }
];
var DEFAULT_SETTINGS = {
  provider: "openai",
  model: "gpt-3.5-turbo",
  apiKey: "",
  apiEndpoint: "https://api.openai.com/v1/chat/completions"
};
var AISettingTab = class extends import_obsidian2.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian2.Setting(containerEl).setName("AI Provider").setDesc("\u9009\u62E9 AI \u670D\u52A1\u63D0\u4F9B\u5546").addDropdown((dropdown) => {
      AI_PROVIDERS.forEach((provider) => {
        dropdown.addOption(provider.id, provider.name);
      });
      dropdown.setValue(this.plugin.settings.provider).onChange((value) => __async(this, null, function* () {
        this.plugin.settings.provider = value;
        const provider = AI_PROVIDERS.find((p) => p.id === value);
        if (provider) {
          if (provider.models.length > 0) {
            this.plugin.settings.model = provider.models[0].id;
          }
        }
        yield this.plugin.saveSettings();
        this.display();
      }));
    });
    const currentProvider = AI_PROVIDERS.find((p) => p.id === this.plugin.settings.provider);
    if (currentProvider) {
      new import_obsidian2.Setting(containerEl).setName("AI Model").setDesc("\u9009\u62E9 AI \u6A21\u578B").addDropdown((dropdown) => {
        currentProvider.models.forEach((model) => {
          dropdown.addOption(model.id, model.name);
        });
        dropdown.setValue(this.plugin.settings.model).onChange((value) => __async(this, null, function* () {
          this.plugin.settings.model = value;
          yield this.plugin.saveSettings();
        }));
      });
    }
    new import_obsidian2.Setting(containerEl).setName("API Key").setDesc("\u8F93\u5165 API Key").addText((text) => text.setPlaceholder("Enter your API key").setValue(this.plugin.settings.apiKey).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.apiKey = value;
      yield this.plugin.saveSettings();
    })));
    new import_obsidian2.Setting(containerEl).setName("API Endpoint").setDesc("\u8F93\u5165 API \u7AEF\u70B9\u5730\u5740\uFF08\u53EF\u9009\uFF0C\u7559\u7A7A\u4F7F\u7528\u9ED8\u8BA4\u503C\uFF09").addText((text) => {
      const provider = AI_PROVIDERS.find((p) => p.id === this.plugin.settings.provider);
      text.setPlaceholder((provider == null ? void 0 : provider.baseUrl) || "Enter API endpoint").setValue(this.plugin.settings.apiEndpoint).onChange((value) => __async(this, null, function* () {
        const provider2 = AI_PROVIDERS.find((p) => p.id === this.plugin.settings.provider);
        this.plugin.settings.apiEndpoint = value || (provider2 == null ? void 0 : provider2.baseUrl) || "";
        yield this.plugin.saveSettings();
      }));
    });
    new import_obsidian2.Setting(containerEl).setName("\u91CD\u7F6E API \u7AEF\u70B9").setDesc("\u6062\u590D\u9ED8\u8BA4 API \u7AEF\u70B9").addButton((button) => button.setButtonText("\u91CD\u7F6E").onClick(() => __async(this, null, function* () {
      const provider = AI_PROVIDERS.find((p) => p.id === this.plugin.settings.provider);
      if (provider) {
        this.plugin.settings.apiEndpoint = provider.baseUrl;
        yield this.plugin.saveSettings();
        this.display();
      }
    })));
  }
};

// src/main.ts
var AIPlugin = class extends import_obsidian3.Plugin {
  constructor() {
    super(...arguments);
    this.aiPromptView = null;
    this.placeholderMarker = null;
    this.placeholderText = "\u6309\u4F4F\u7A7A\u683C\u542F\u52A8 AI...";
  }
  onload() {
    return __async(this, null, function* () {
      yield this.loadSettings();
      this.addSettingTab(new AISettingTab(this.app, this));
      this.registerEvent(this.app.workspace.on("active-leaf-change", () => {
        this.updatePlaceholder();
      }));
      this.registerEvent(this.app.workspace.on("editor-change", () => {
        this.updatePlaceholder();
      }));
      let spaceKeyPressed = false;
      this.registerDomEvent(document, "keydown", (evt) => {
        if (evt.key === " " && !evt.repeat && !evt.isComposing && !spaceKeyPressed) {
          const activeView = this.app.workspace.getActiveViewOfType(import_obsidian3.MarkdownView);
          if (activeView) {
            const editor = activeView.editor;
            const cursor = editor.getCursor();
            const line = editor.getLine(cursor.line);
            if (!line.trim()) {
              evt.preventDefault();
              spaceKeyPressed = true;
              this.showAIPrompt(editor, cursor);
            }
          }
        }
        if (evt.key === "Enter") {
          setTimeout(() => {
            this.updatePlaceholder();
          }, 0);
        }
      });
      this.registerDomEvent(document, "keyup", (evt) => {
        if (evt.key === " ") {
          spaceKeyPressed = false;
          if (this.aiPromptView && !this.aiPromptView.isInputFocused()) {
            this.aiPromptView.hide();
          }
        }
      });
    });
  }
  loadSettings() {
    return __async(this, null, function* () {
      this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
    });
  }
  saveSettings() {
    return __async(this, null, function* () {
      yield this.saveData(this.settings);
    });
  }
  updatePlaceholder() {
    const activeView = this.app.workspace.getActiveViewOfType(import_obsidian3.MarkdownView);
    if (!activeView)
      return;
    const editor = activeView.editor;
    const cursor = editor.getCursor();
    this.clearAllPlaceholders();
    const totalLines = editor.lineCount();
    for (let i = 0; i < totalLines; i++) {
      const line = editor.getLine(i);
      if (!line.trim()) {
        if (i === cursor.line) {
          this.showPlaceholderAtLine(i, activeView);
        }
      }
    }
  }
  clearAllPlaceholders() {
    const activeView = this.app.workspace.getActiveViewOfType(import_obsidian3.MarkdownView);
    if (!activeView)
      return;
    const existingPlaceholders = activeView.contentEl.querySelectorAll(".ai-prompt-placeholder");
    existingPlaceholders.forEach((el) => el.remove());
    if (this.placeholderMarker) {
      this.placeholderMarker.clear();
      this.placeholderMarker = null;
    }
  }
  showPlaceholderAtLine(lineNumber, view) {
    const editorEl = view.contentEl.querySelector(".cm-editor");
    if (!editorEl)
      return;
    const lineEl = editorEl.querySelector(`.cm-line:nth-child(${lineNumber + 1})`);
    if (!lineEl)
      return;
    if (!lineEl.querySelector(".ai-prompt-placeholder")) {
      const placeholder = this.createPlaceholderElement();
      lineEl.appendChild(placeholder);
      this.placeholderMarker = {
        clear: () => placeholder.remove()
      };
    }
  }
  createPlaceholderElement() {
    const placeholder = document.createElement("span");
    placeholder.addClass("ai-prompt-placeholder");
    placeholder.setText(this.placeholderText);
    placeholder.style.fontStyle = "italic";
    placeholder.style.color = "var(--text-faint)";
    return placeholder;
  }
  showAIPrompt(editor, cursor) {
    const view = this.app.workspace.getActiveViewOfType(import_obsidian3.MarkdownView);
    if (!view)
      return;
    const editorEl = view.contentEl.querySelector(".cm-editor");
    if (!editorEl)
      return;
    const lineEl = editorEl.querySelector(`.cm-line:nth-child(${cursor.line + 1})`);
    if (!lineEl)
      return;
    const editorRect = editorEl.getBoundingClientRect();
    const lineRect = lineEl.getBoundingClientRect();
    if (!this.aiPromptView) {
      this.aiPromptView = new AIPromptView(this.app, this, editor);
    }
    const absoluteLeft = lineRect.left;
    const absoluteTop = lineRect.top;
    this.aiPromptView.show({
      left: absoluteLeft,
      top: absoluteTop + lineRect.height
    });
  }
  onunload() {
    if (this.placeholderMarker) {
      this.placeholderMarker.clear();
    }
    if (this.aiPromptView) {
      this.aiPromptView.hide();
    }
  }
  callAIAPI(prompt) {
    return __async(this, null, function* () {
      try {
        const provider = AI_PROVIDERS.find((p) => p.id === this.settings.provider);
        if (!provider) {
          throw new Error("\u672A\u627E\u5230 AI \u63D0\u4F9B\u5546");
        }
        const apiEndpoint = this.settings.apiEndpoint || provider.baseUrl;
        if (!apiEndpoint) {
          throw new Error("\u672A\u8BBE\u7F6E API \u7AEF\u70B9");
        }
        const headers = {
          "Content-Type": "application/json"
        };
        switch (this.settings.provider) {
          case "openai":
          case "deepseek":
            headers["Authorization"] = `Bearer ${this.settings.apiKey}`;
            break;
          case "claude":
            headers["x-api-key"] = this.settings.apiKey;
            headers["anthropic-version"] = "2023-06-01";
            break;
          case "azure":
            headers["api-key"] = this.settings.apiKey;
            break;
          case "chatglm":
            headers["Authorization"] = this.settings.apiKey;
            break;
          default:
            headers["Authorization"] = `Bearer ${this.settings.apiKey}`;
        }
        let requestBody;
        switch (this.settings.provider) {
          case "claude":
            requestBody = {
              model: this.settings.model,
              messages: [{ role: "user", content: prompt }],
              max_tokens: 1e3
            };
            break;
          default:
            requestBody = {
              model: this.settings.model,
              messages: [{ role: "user", content: prompt }]
            };
        }
        const response = yield fetch(apiEndpoint, {
          method: "POST",
          headers,
          body: JSON.stringify(requestBody)
        });
        if (!response.ok) {
          throw new Error(`API request failed: ${response.statusText}`);
        }
        const data = yield response.json();
        switch (this.settings.provider) {
          case "claude":
            return data.content[0].text;
          default:
            return data.choices[0].message.content;
        }
      } catch (error) {
        new import_obsidian3.Notice("AI API \u8C03\u7528\u5931\u8D25: " + error.message);
        return "";
      }
    });
  }
  generateSummary(prompt) {
    return __async(this, null, function* () {
      return yield this.callAIAPI(`\u751F\u6210\u6458\u8981\uFF1A${prompt}`);
    });
  }
  generateTodoList(prompt) {
    return __async(this, null, function* () {
      return yield this.callAIAPI(`\u751F\u6210\u5F85\u529E\u4E8B\u9879\uFF1A${prompt}`);
    });
  }
  generateTable(prompt) {
    return __async(this, null, function* () {
      return yield this.callAIAPI(`\u751F\u6210\u8868\u683C\uFF1A${prompt}`);
    });
  }
  generateFlowchart(prompt) {
    return __async(this, null, function* () {
      return yield this.callAIAPI(`\u751F\u6210\u6D41\u7A0B\u56FE\uFF1A${prompt}`);
    });
  }
};
//# sourceMappingURL=data:application/json;base64,
